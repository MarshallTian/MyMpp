/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "FileObjects_types.h"

#include <algorithm>

namespace MyMpp {

int _kTHdfsFileFormatValues[] = {
  THdfsFileFormat::TEXT
};
const char* _kTHdfsFileFormatNames[] = {
  "TEXT"
};
const std::map<int, const char*> _THdfsFileFormat_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTHdfsFileFormatValues, _kTHdfsFileFormatNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* THdfsFileBlock::ascii_fingerprint = "C8196C2B7EBDDD72F1AECAB537F8D27A";
const uint8_t THdfsFileBlock::binary_fingerprint[16] = {0xC8,0x19,0x6C,0x2B,0x7E,0xBD,0xDD,0x72,0xF1,0xAE,0xCA,0xB5,0x37,0xF8,0xD2,0x7A};

uint32_t THdfsFileBlock::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_offset = false;
  bool isset_length = false;
  bool isset_replica_host_idxs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          isset_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          isset_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->replica_host_idxs.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->replica_host_idxs.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->replica_host_idxs[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_replica_host_idxs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->disk_ids.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->disk_ids.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->disk_ids[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.disk_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_offset)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_length)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_replica_host_idxs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t THdfsFileBlock::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("THdfsFileBlock");

  ++fcnt;
  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("replica_host_idxs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->replica_host_idxs.size()));
    std::vector<int32_t> ::const_iterator _iter10;
    for (_iter10 = this->replica_host_idxs.begin(); _iter10 != this->replica_host_idxs.end(); ++_iter10)
    {
      xfer += oprot->writeI32((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.disk_ids) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("disk_ids", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->disk_ids.size()));
      std::vector<int32_t> ::const_iterator _iter11;
      for (_iter11 = this->disk_ids.begin(); _iter11 != this->disk_ids.end(); ++_iter11)
      {
        xfer += oprot->writeI32((*_iter11));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(THdfsFileBlock &a, THdfsFileBlock &b) {
  using ::std::swap;
  swap(a.offset, b.offset);
  swap(a.length, b.length);
  swap(a.replica_host_idxs, b.replica_host_idxs);
  swap(a.disk_ids, b.disk_ids);
  swap(a.__isset, b.__isset);
}

const char* THdfsFileDesc::ascii_fingerprint = "A6B3ED0619BEC3BB5A3CB49C8D7B6719";
const uint8_t THdfsFileDesc::binary_fingerprint[16] = {0xA6,0xB3,0xED,0x06,0x19,0xBE,0xC3,0xBB,0x5A,0x3C,0xB4,0x9C,0x8D,0x7B,0x67,0x19};

uint32_t THdfsFileDesc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_file_name = false;
  bool isset_length = false;
  bool isset_last_modification_time = false;
  bool isset_file_blocks = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_name);
          isset_file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          isset_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_modification_time);
          isset_last_modification_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->file_blocks.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->file_blocks.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->file_blocks[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_file_blocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_file_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_length)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_last_modification_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_file_blocks)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t THdfsFileDesc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("THdfsFileDesc");

  ++fcnt;
  xfer += oprot->writeFieldBegin("file_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->file_name);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("last_modification_time", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->last_modification_time);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("file_blocks", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->file_blocks.size()));
    std::vector<THdfsFileBlock> ::const_iterator _iter17;
    for (_iter17 = this->file_blocks.begin(); _iter17 != this->file_blocks.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(THdfsFileDesc &a, THdfsFileDesc &b) {
  using ::std::swap;
  swap(a.file_name, b.file_name);
  swap(a.length, b.length);
  swap(a.last_modification_time, b.last_modification_time);
  swap(a.file_blocks, b.file_blocks);
}

} // namespace
